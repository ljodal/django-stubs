-   case: login_required_bare
    main: |
        from typing import Any
        from django.contrib.auth.decorators import login_required
        from django.http import HttpRequest, HttpResponse
        @login_required
        def view_func(request: HttpRequest) -> HttpResponse: ...
        reveal_type(view_func)  # N: Revealed type is "def (request: django.http.request.HttpRequest) -> django.http.response.HttpResponse"
-   case: login_required_fancy
    main: |
        from django.contrib.auth.decorators import login_required
        from django.core.handlers.wsgi import WSGIRequest
        from django.http import HttpResponse
        @login_required(redirect_field_name='a', login_url='b')
        def view_func(request: WSGIRequest, arg: str) -> HttpResponse: ...
        reveal_type(view_func)  # N: Revealed type is "def (request: django.core.handlers.wsgi.WSGIRequest, arg: builtins.str) -> django.http.response.HttpResponse"
-   case: login_required_weird
    main: |
        from django.contrib.auth.decorators import login_required
        from django.http import HttpRequest, HttpResponse
        # This is non-conventional usage, but covered in Django tests, so we allow it.
        def view_func(request: HttpRequest) -> HttpResponse: ...
        wrapped_view = login_required(view_func, redirect_field_name='a', login_url='b')
        reveal_type(wrapped_view)  # N: Revealed type is "def (request: django.http.request.HttpRequest) -> django.http.response.HttpResponse"
-   case: login_required_incorrect_return
    main: |
        from typing import Any
        from django.contrib.auth.decorators import login_required
        @login_required()  # E: Value of type variable "_VIEW" of function cannot be "Callable[[Any], str]"
        def view_func2(request: Any) -> str: ...
-   case: user_passes_test
    main: |
        from django.contrib.auth.decorators import user_passes_test
        from django.http import HttpRequest, HttpResponse
        @user_passes_test(lambda u: u.get_username().startswith('super'))
        def view_func(request: HttpRequest) -> HttpResponse: ...
        reveal_type(view_func)  # N: Revealed type is "def (request: django.http.request.HttpRequest) -> django.http.response.HttpResponse"
-   case: user_passes_test_custom_user_model
    main: |
        from typing import Union
        from django.contrib.auth.decorators import user_passes_test
        from django.contrib.auth.models import AnonymousUser, AbstractBaseUser
        from django.http import HttpRequest, HttpResponse
        from users.models import User

        def check_user1(user: Union[User, AnonymousUser]) -> bool: ...
        user_passes_test(check_user1)
        def check_user2(user: User) -> bool: ...
        user_passes_test(check_user2) # E: Argument 1 to "user_passes_test" has incompatible type "Callable[[User], bool]"; expected "Callable[[Union[User, AnonymousUser]], bool]"
        def check_user3(user: Union[AnonymousUser, User]) -> bool: ...
        user_passes_test(check_user3)
        def check_user4(user: Union[AnonymousUser, AbstractBaseUser]) -> bool: ...
        user_passes_test(check_user4)
    custom_settings: |
        AUTH_USER_MODEL = "users.User"
        INSTALLED_APPS = ("django.contrib.auth", "django.contrib.contenttypes", "users")
    files:
        -   path: users/__init__.py
        -   path: users/models.py
            content: |
                from django.contrib.auth.models import AbstractBaseUser
                from django.db import models
                class User(AbstractBaseUser):
                    email = models.EmailField(unique=True)
                    USERNAME_FIELD = "email"
-   case: user_passes_test_bare_is_error
    main: |
        from django.http import HttpRequest, HttpResponse
        from django.contrib.auth.decorators import user_passes_test
        @user_passes_test  # E: Argument 1 to "user_passes_test" has incompatible type "Callable[[HttpRequest], HttpResponse]"; expected "Callable[[Union[AbstractBaseUser, AnonymousUser]], bool]"
        def view_func(request: HttpRequest) -> HttpResponse: ...
-   case: permission_required
    main: |
        from django.contrib.auth.decorators import permission_required
        from django.http import HttpRequest, HttpResponse
        @permission_required('polls.can_vote')
        def view_func(request: HttpRequest) -> HttpResponse: ...
